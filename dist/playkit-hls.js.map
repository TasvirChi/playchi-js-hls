{"version":3,"sources":["./hls/webpack/universalModuleDefinition","./hls/playkit-hls.js","./hls/webpack/bootstrap 3cefdc6875e14a04b064","./hls/external {\"commonjs\":\"playkit-js\",\"commonjs2\":\"playkit-js\",\"amd\":\"playkit-js\",\"root\":\"Playkit\"}","./hls/./index.js","./hls/./hls-adapter.js","./hls/external {\"commonjs\":\"hls.js\",\"commonjs2\":\"hls.js\",\"amd\":\"hls.js\",\"root\":\"Hls\"}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_0__","__WEBPACK_EXTERNAL_MODULE_3__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","NAME","VERSION","undefined","_playkitJs","_hlsAdapter","_hlsAdapter2","obj","default","isSupported","registerMediaSourceAdapter","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","writable","setPrototypeOf","__proto__","_get","receiver","Function","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_hls","_hls2","_defaultConfig","recoverDecodingErrorDelay","recoverSwapAudioCodecDelay","fragLoadingMaxRetry","HlsAdapter","_BaseMediaSourceAdapt","videoElement","source","config","_logger","debug","version","_this","_config","Utils","mergeDeep","_addBindings","hlsConfig","hasPropertyPath","playback","options","html5","hls","mimeType","canHlsPlayType","_hlsMimeTypes","includes","toLowerCase","toString","warn","isHlsSupported","_this2","on","Events","ERROR","e","data","_onError","MANIFEST_LOADED","_onManifestLoaded","bind","LEVEL_SWITCHED","_onLevelSwitched","AUDIO_TRACK_SWITCHED","_onAudioTrackSwitched","startTime","_this3","_loadPromise","Promise","resolve","onLevelUpdated","off","LEVEL_UPDATED","tracks","_playerTracks","startPosition","_sourceObj","url","loadSource","attachMedia","_videoElement","_trigger","BaseMediaSourceAdapter","CustomEvents","ABR_MODE_CHANGED","mode","isAdaptiveBitrateEnabled","_this4","then","_removeBindings","detachMedia","destroy","audioTracks","_parseAudioTracks","videoTracks","_parseVideoTracks","levels","textTracks","_parseTextTracks","subtitleTracks","concat","hlsAudioTracks","settings","id","active","audioTrack","label","language","lang","index","push","AudioTrack","hlsVideoTracks","startLevel","bandwidth","bitrate","width","height","VideoTrack","hlsTextTracks","kind","type","TextTrack","videoTrack","currentLevel","textTrack","_disableAllTextTracks","_onTrackChanged","nextLevel","autoLevelEnabled","liveEdge","liveSyncDuration","duration","liveSyncDurationCount","details","targetduration","NaN","currentTime","_getLiveEdge","live","event","startLoad","_parseTracks","find","track","level","vidTextTracks","severity","category","code","description","message","Error","Html5Events","errorType","errorDetails","fatal","error","ErrorTypes","NETWORK_ERROR","Severity","CRITICAL","Category","NETWORK","Code","HTTP_ERROR","MEDIA_ERROR","_handleMediaError","RECOVERABLE","MEDIA","HLS_FATAL_MEDIA_ERROR","PLAYER","errorData","_getErrorData","now","performance","recover","_recoverDecodingErrorDate","recoverMediaError","_recoverSwapAudioCodecDate","swapAudioCodec","ErrorDetails","MANIFEST_LOAD_ERROR","MANIFEST","MANIFEST_LOAD_TIMEOUT","TIMEOUT","MANIFEST_PARSING_ERROR","HLSJS_CANNOT_PARSE","LEVEL_LOAD_ERROR","LEVEL_LOAD_TIMEOUT","LEVEL_SWITCH_ERROR","BITRATE_SWITCH_ISSUE","FRAG_LOAD_ERROR","FRAG_LOOP_LOADING_ERROR","FRAG_LOAD_TIMEOUT","FRAG_PARSING_ERROR","HLS_FRAG_PARSING_ERROR","BUFFER_APPEND_ERROR","HLS_BUFFER_APPEND_ISSUE","BUFFER_APPENDING_ERROR","HLS_BUFFER_APPENDING_ISSUE","isLive","getLogger"],"mappings":"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","file":"playkit-hls.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"playkit-js\"), require(\"hls.js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"playkit-js\", \"hls.js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PlaykitJsHls\"] = factory(require(\"playkit-js\"), require(\"hls.js\"));\n\telse\n\t\troot[\"PlaykitJsHls\"] = factory(root[\"Playkit\"], root[\"Hls\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_3__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"playkit-js\"), require(\"hls.js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"playkit-js\", \"hls.js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PlaykitJsHls\"] = factory(require(\"playkit-js\"), require(\"hls.js\"));\n\telse\n\t\troot[\"PlaykitJsHls\"] = factory(root[\"Playkit\"], root[\"Hls\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_3__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NAME = exports.VERSION = undefined;\n\nvar _playkitJs = __webpack_require__(0);\n\nvar _hlsAdapter = __webpack_require__(2);\n\nvar _hlsAdapter2 = _interopRequireDefault(_hlsAdapter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _hlsAdapter2.default;\nexports.VERSION = \"1.4.1\";\nexports.NAME = \"playkit-js-hls\";\n\n// Register hls adapter to the media source adapter provider.\n\nif (_hlsAdapter2.default.isSupported()) {\n  (0, _playkitJs.registerMediaSourceAdapter)(_hlsAdapter2.default);\n}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _hls = __webpack_require__(3);\n\nvar _hls2 = _interopRequireDefault(_hls);\n\nvar _playkitJs = __webpack_require__(0);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _defaultConfig = {\n  \"recoverDecodingErrorDelay\": 3000,\n  \"recoverSwapAudioCodecDelay\": 3000,\n  \"fragLoadingMaxRetry\": 4\n};\n\n/**\n * Adapter of hls.js lib for hls content.\n * @classdesc\n */\n\nvar HlsAdapter = function (_BaseMediaSourceAdapt) {\n  _inherits(HlsAdapter, _BaseMediaSourceAdapt);\n\n  _createClass(HlsAdapter, null, [{\n    key: 'createAdapter',\n\n\n    /**\n     * Factory method to create media source adapter.\n     * @function createAdapter\n     * @param {HTMLVideoElement} videoElement - The video element that the media source adapter work with.\n     * @param {Object} source - The source Object.\n     * @param {Object} config - The player configuration.\n     * @returns {IMediaSourceAdapter} - New instance of the run time media source adapter.\n     * @static\n     */\n\n    /**\n     * The hls player instance.\n     * @member {any} _hls\n     * @private\n     */\n\n\n    /**\n     * last recover date from decoding error\n     * @type {number}\n     * @private\n     */\n\n\n    /**\n     * last recover date from audio swap codec operation\n     * @type {number}\n     * @private\n     */\n\n\n    /**\n     * The load promise\n     * @member {Promise<Object>} - _loadPromise\n     * @type {Promise<Object>}\n     * @private\n     */\n\n    /**\n     * Reference to the player tracks.\n     * @member {Array<Track>} - _playerTracks\n     * @type {Array<Track>}\n     * @private\n     */\n\n    /**\n     * The adapter logger.\n     * @member {any} _logger\n     * @static\n     * @private\n     */\n    value: function createAdapter(videoElement, source, config) {\n      var hlsConfig = {};\n      if (_playkitJs.Utils.Object.hasPropertyPath(config, 'playback.options.html5.hls')) {\n        hlsConfig = config.playback.options.html5.hls;\n      }\n      return new this(videoElement, source, hlsConfig);\n    }\n\n    /**\n     * Checks if hls adapter can play a given mime type.\n     * @function canPlayType\n     * @param {string} mimeType - The mime type to check.\n     * @returns {boolean} - Whether the hls adapter can play a specific mime type.\n     * @static\n     */\n\n    /**\n     * The supported mime types by the hls adapter.\n     * @member {Array<string>} _hlsMimeType\n     * @static\n     * @private\n     */\n\n    /**\n     * The id of the adapter.\n     * @member {string} id\n     * @static\n     * @private\n     */\n\n  }, {\n    key: 'canPlayType',\n    value: function canPlayType(mimeType) {\n      var canHlsPlayType = typeof mimeType === 'string' ? HlsAdapter._hlsMimeTypes.includes(mimeType.toLowerCase()) : false;\n      HlsAdapter._logger.debug('canPlayType result for mimeType:' + mimeType + ' is ' + canHlsPlayType.toString());\n      return canHlsPlayType;\n    }\n\n    /**\n     * Checks if hls adapter can play a given drm data.\n     * For hls.js it always returns false.\n     * @returns {boolean} - Whether the hls adapter can play a specific drm data.\n     * @static\n     */\n\n  }, {\n    key: 'canPlayDrm',\n    value: function canPlayDrm() {\n      HlsAdapter._logger.warn('canPlayDrm result is false');\n      return false;\n    }\n\n    /**\n     * Checks if the hls adapter is supported.\n     * @function isSupported\n     * @returns {boolean} - Whether hls is supported.\n     * @static\n     */\n\n  }, {\n    key: 'isSupported',\n    value: function isSupported() {\n      var isHlsSupported = _hls2.default.isSupported();\n      HlsAdapter._logger.debug('isSupported:' + isHlsSupported);\n      return isHlsSupported;\n    }\n\n    /**\n     * @constructor\n     * @param {HTMLVideoElement} videoElement - The video element which will bind to the hls adapter\n     * @param {Object} source - The source object\n     * @param {Object} config - The media source adapter configuration\n     */\n\n  }]);\n\n  function HlsAdapter(videoElement, source, config) {\n    _classCallCheck(this, HlsAdapter);\n\n    HlsAdapter._logger.debug('Creating adapter. Hls version: ' + _hls2.default.version);\n\n    var _this = _possibleConstructorReturn(this, (HlsAdapter.__proto__ || Object.getPrototypeOf(HlsAdapter)).call(this, videoElement, source, config));\n\n    _this._config = _playkitJs.Utils.Object.mergeDeep({}, _this._config, _defaultConfig);\n    _this._hls = new _hls2.default(_this._config);\n    _this._addBindings();\n    return _this;\n  }\n\n  /**\n   * Adds the required bindings with hls.js.\n   * @function _addBindings\n   * @private\n   * @returns {void}\n   */\n\n\n  _createClass(HlsAdapter, [{\n    key: '_addBindings',\n    value: function _addBindings() {\n      var _this2 = this;\n\n      this._hls.on(_hls2.default.Events.ERROR, function (e, data) {\n        _this2._onError(data);\n      });\n      this._hls.on(_hls2.default.Events.MANIFEST_LOADED, this._onManifestLoaded.bind(this));\n      this._hls.on(_hls2.default.Events.LEVEL_SWITCHED, this._onLevelSwitched.bind(this));\n      this._hls.on(_hls2.default.Events.AUDIO_TRACK_SWITCHED, this._onAudioTrackSwitched.bind(this));\n    }\n\n    /**\n     * Load the video source\n     * @function load\n     * @param {number} startTime - Optional time to start the video from.\n     * @returns {Promise<Object>} - The loaded data\n     * @override\n     */\n\n  }, {\n    key: 'load',\n    value: function load(startTime) {\n      var _this3 = this;\n\n      if (!this._loadPromise) {\n        this._loadPromise = new Promise(function (resolve) {\n          var onLevelUpdated = function onLevelUpdated() {\n            _this3._hls.off(_hls2.default.Events.LEVEL_UPDATED, onLevelUpdated);\n            resolve({ tracks: _this3._playerTracks });\n          };\n          _this3._hls.on(_hls2.default.Events.LEVEL_UPDATED, onLevelUpdated);\n          if (startTime) {\n            _this3._hls.startPosition = startTime;\n          }\n          if (_this3._sourceObj && _this3._sourceObj.url) {\n            _this3._hls.loadSource(_this3._sourceObj.url);\n            _this3._hls.attachMedia(_this3._videoElement);\n            _this3._trigger(_playkitJs.BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, { mode: _this3.isAdaptiveBitrateEnabled() ? 'auto' : 'manual' });\n          }\n        });\n      }\n      return this._loadPromise;\n    }\n\n    /**\n     * Destroys the hls adapter.\n     * @function destroy\n     * @override\n     * @returns {Promise<*>} - The destroy promise.\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      var _this4 = this;\n\n      return _get(HlsAdapter.prototype.__proto__ || Object.getPrototypeOf(HlsAdapter.prototype), 'destroy', this).call(this).then(function () {\n        HlsAdapter._logger.debug('destroy');\n        _this4._loadPromise = null;\n        _this4._playerTracks = [];\n        _this4._removeBindings();\n        _this4._hls.detachMedia();\n        _this4._hls.destroy();\n      });\n    }\n\n    /**\n     * Parse the hls tracks into player tracks.\n     * @param {any} data - The event data.\n     * @returns {Array<Track>} - The parsed tracks.\n     * @private\n     */\n\n  }, {\n    key: '_parseTracks',\n    value: function _parseTracks(data) {\n      var audioTracks = this._parseAudioTracks(data.audioTracks || []);\n      var videoTracks = this._parseVideoTracks(data.levels || []);\n      var textTracks = this._parseTextTracks(this._hls.subtitleTracks || []);\n      return audioTracks.concat(videoTracks).concat(textTracks);\n    }\n\n    /**\n     * Parse hls audio tracks into player audio tracks.\n     * @param {Array<Object>} hlsAudioTracks - The hls audio tracks.\n     * @returns {Array<AudioTrack>} - The parsed audio tracks.\n     * @private\n     */\n\n  }, {\n    key: '_parseAudioTracks',\n    value: function _parseAudioTracks(hlsAudioTracks) {\n      var audioTracks = [];\n      for (var i = 0; i < hlsAudioTracks.length; i++) {\n        // Create audio tracks\n        var settings = {\n          id: hlsAudioTracks[i].id,\n          active: this._hls.audioTrack === hlsAudioTracks[i].id,\n          label: hlsAudioTracks[i].name,\n          language: hlsAudioTracks[i].lang,\n          index: i\n        };\n        audioTracks.push(new _playkitJs.AudioTrack(settings));\n      }\n      return audioTracks;\n    }\n\n    /**\n     * Parse hls video tracks into player video tracks.\n     * @param {Array<Object>} hlsVideoTracks - The hls video tracks.\n     * @returns {Array<VideoTrack>} - The parsed video tracks.\n     * @private\n     */\n\n  }, {\n    key: '_parseVideoTracks',\n    value: function _parseVideoTracks(hlsVideoTracks) {\n      var videoTracks = [];\n      for (var i = 0; i < hlsVideoTracks.length; i++) {\n        // Create video tracks\n        var settings = {\n          active: this._hls.startLevel === i,\n          label: hlsVideoTracks[i].name,\n          bandwidth: hlsVideoTracks[i].bitrate,\n          width: hlsVideoTracks[i].width,\n          height: hlsVideoTracks[i].height,\n          language: '',\n          index: i\n        };\n        videoTracks.push(new _playkitJs.VideoTrack(settings));\n      }\n      return videoTracks;\n    }\n\n    /**\n     * Parse hls text tracks into player text tracks.\n     * @param {Array<Object>} hlsTextTracks - The hls text tracks.\n     * @returns {Array<TextTrack>} - The parsed text tracks.\n     * @private\n     */\n\n  }, {\n    key: '_parseTextTracks',\n    value: function _parseTextTracks(hlsTextTracks) {\n      var textTracks = [];\n      for (var i = 0; i < hlsTextTracks.length; i++) {\n        // Create text tracks\n        var settings = {\n          id: hlsTextTracks[i].id,\n          active: hlsTextTracks[i].default,\n          label: hlsTextTracks[i].name,\n          kind: hlsTextTracks[i].type.toLowerCase(),\n          language: hlsTextTracks[i].lang,\n          index: i\n        };\n        textTracks.push(new _playkitJs.TextTrack(settings));\n      }\n      return textTracks;\n    }\n\n    /**\n     * Select an audio track.\n     * @function selectAudioTrack\n     * @param {AudioTrack} audioTrack - the audio track to select.\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'selectAudioTrack',\n    value: function selectAudioTrack(audioTrack) {\n      if (audioTrack instanceof _playkitJs.AudioTrack && !audioTrack.active && this._hls.audioTracks) {\n        this._hls.audioTrack = audioTrack.id;\n      }\n    }\n\n    /**\n     * Select a video track.\n     * @function selectVideoTrack\n     * @param {VideoTrack} videoTrack - the track to select.\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'selectVideoTrack',\n    value: function selectVideoTrack(videoTrack) {\n      if (videoTrack instanceof _playkitJs.VideoTrack && (!videoTrack.active || this.isAdaptiveBitrateEnabled()) && this._hls.levels) {\n        if (this.isAdaptiveBitrateEnabled()) {\n          this._trigger(_playkitJs.BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, { mode: 'manual' });\n        }\n        this._hls.currentLevel = videoTrack.index;\n      }\n    }\n\n    /**\n     * Select a text track.\n     * @function selectTextTrack\n     * @param {TextTrack} textTrack - the track to select.\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'selectTextTrack',\n    value: function selectTextTrack(textTrack) {\n      if (textTrack instanceof _playkitJs.TextTrack && !textTrack.active && this._videoElement.textTracks) {\n        this._disableAllTextTracks();\n        this._videoElement.textTracks[textTrack.index].mode = 'hidden';\n        HlsAdapter._logger.debug('Text track changed', textTrack);\n        this._onTrackChanged(textTrack);\n      }\n    }\n\n    /** Hide the text track\n     * @function hideTextTrack\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'hideTextTrack',\n    value: function hideTextTrack() {\n      this._disableAllTextTracks();\n    }\n\n    /**\n     * Enables adaptive bitrate switching according to hls.js logic.\n     * @function enableAdaptiveBitrate\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'enableAdaptiveBitrate',\n    value: function enableAdaptiveBitrate() {\n      if (!this.isAdaptiveBitrateEnabled()) {\n        this._trigger(_playkitJs.BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, { mode: 'auto' });\n        this._hls.nextLevel = -1;\n      }\n    }\n\n    /**\n     * Checking if adaptive bitrate switching is enabled.\n     * @function isAdaptiveBitrateEnabled\n     * @returns {boolean} - Whether adaptive bitrate is enabled.\n     * @public\n     */\n\n  }, {\n    key: 'isAdaptiveBitrateEnabled',\n    value: function isAdaptiveBitrateEnabled() {\n      return this._hls.autoLevelEnabled;\n    }\n\n    /**\n     * Returns the live edge\n     * @returns {number} - live edge\n     * @private\n     */\n\n  }, {\n    key: '_getLiveEdge',\n    value: function _getLiveEdge() {\n      try {\n        var liveEdge = void 0;\n        if (this._hls.config.liveSyncDuration) {\n          liveEdge = this._videoElement.duration - this._hls.config.liveSyncDuration;\n        } else {\n          liveEdge = this._videoElement.duration - this._hls.config.liveSyncDurationCount * this._hls.levels[0].details.targetduration;\n        }\n        return liveEdge > 0 ? liveEdge : 0;\n      } catch (e) {\n        return NaN;\n      }\n    }\n\n    /**\n     * Seeking to live edge, calculated according hls configuration - liveSyncDuration or liveSyncDurationCount.\n     * @function seekToLiveEdge\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'seekToLiveEdge',\n    value: function seekToLiveEdge() {\n      try {\n        this._videoElement.currentTime = this._getLiveEdge();\n      } catch (e) {\n        return;\n      }\n    }\n\n    /**\n     * Checking if the current playback is live.\n     * @function isLive\n     * @returns {boolean} - Whether playback is live.\n     * @public\n     */\n\n  }, {\n    key: 'isLive',\n    value: function isLive() {\n      try {\n        return this._hls.levels[0].details.live;\n      } catch (e) {\n        return false;\n      }\n    }\n\n    /**\n     * Fired after manifest has been loaded.\n     * @function _onManifestLoaded\n     * @param {string} event - The event name.\n     * @param {any} data - The event data object.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_onManifestLoaded',\n    value: function _onManifestLoaded(event, data) {\n      HlsAdapter._logger.debug('The source has been loaded successfully');\n      this._hls.startLoad();\n      this._playerTracks = this._parseTracks(data);\n    }\n\n    /**\n     * Triggers on video track selection (auto or manually) the 'videotrackchanged' event forward.\n     * @function _onLevelSwitched\n     * @param {string} event - The event name.\n     * @param {any} data - The event data object.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_onLevelSwitched',\n    value: function _onLevelSwitched(event, data) {\n      var videoTrack = this._playerTracks.find(function (track) {\n        return track instanceof _playkitJs.VideoTrack && track.index === data.level;\n      });\n      HlsAdapter._logger.debug('Video track changed', videoTrack);\n      this._onTrackChanged(videoTrack);\n    }\n\n    /**\n     * Triggers on audio track selection (auto or manually) the 'audiotrackchanged' event forward.\n     * @function _onAudioTrackSwitched\n     * @param {string} event - The event name.\n     * @param {any} data - The event data object.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_onAudioTrackSwitched',\n    value: function _onAudioTrackSwitched(event, data) {\n      var audioTrack = this._playerTracks.find(function (track) {\n        return track instanceof _playkitJs.AudioTrack && track.id === data.id;\n      });\n      HlsAdapter._logger.debug('Audio track changed', audioTrack);\n      this._onTrackChanged(audioTrack);\n    }\n\n    /**\n     * Disables all the video tag text tracks.\n     * @returns {void}\n     * @private\n     */\n\n  }, {\n    key: '_disableAllTextTracks',\n    value: function _disableAllTextTracks() {\n      var vidTextTracks = this._videoElement.textTracks;\n      for (var i = 0; i < vidTextTracks.length; i++) {\n        vidTextTracks[i].mode = 'disabled';\n      }\n    }\n\n    /**\n     * Handles hls errors.\n     * @param {number} severity - The error severity.\n     * @param {number} category - The error category.\n     * @param {number} code - The error code.\n     * @param {any} description - The error description.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleError',\n    value: function _handleError(severity, category, code, description) {\n      var message = new _playkitJs.Error(severity, category, code, { data: description });\n      this._trigger(_playkitJs.BaseMediaSourceAdapter.Html5Events.ERROR, message);\n    }\n\n    /**\n     * Handles hls errors.\n     * @param {any} data - The event data object.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_onError',\n    value: function _onError(data) {\n      var errorType = data.type;\n      var errorDetails = data.details;\n      var errorFatal = data.fatal;\n      if (errorFatal) {\n        var error = void 0;\n        switch (errorType) {\n          case _hls2.default.ErrorTypes.NETWORK_ERROR:\n            error = new _playkitJs.Error(_playkitJs.Error.Severity.CRITICAL, _playkitJs.Error.Category.NETWORK, _playkitJs.Error.Code.HTTP_ERROR, errorDetails);\n            break;\n          case _hls2.default.ErrorTypes.MEDIA_ERROR:\n            if (this._handleMediaError()) {\n              error = new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.MEDIA, _playkitJs.Error.Code.HLS_FATAL_MEDIA_ERROR, errorDetails);\n            } else {\n              error = new _playkitJs.Error(_playkitJs.Error.Severity.CRITICAL, _playkitJs.Error.Category.MEDIA, _playkitJs.Error.Code.HLS_FATAL_MEDIA_ERROR, errorDetails);\n            }\n            break;\n          default:\n            error = new _playkitJs.Error(_playkitJs.Error.Severity.CRITICAL, _playkitJs.Error.Category.PLAYER, _playkitJs.Error.Code.HLS_FATAL_MEDIA_ERROR, errorDetails);\n            break;\n        }\n        this._trigger(_playkitJs.BaseMediaSourceAdapter.Html5Events.ERROR, error);\n        if (error && error.severity === _playkitJs.Error.Severity.CRITICAL) {\n          this.destroy();\n        }\n      } else {\n        var errorData = this._getErrorData(errorDetails);\n        HlsAdapter._logger.warn(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, errorData.category, errorData.code, errorDetails));\n      }\n    }\n  }, {\n    key: '_handleMediaError',\n    value: function _handleMediaError() {\n      var now = performance.now();\n      var recover = true;\n      if (!this._recoverDecodingErrorDate || now - this._recoverDecodingErrorDate > this._config.recoverDecodingErrorDelay) {\n        this._recoverDecodingErrorDate = performance.now();\n        HlsAdapter._logger.warn(\"try to recover media Error\");\n        this.hls.recoverMediaError();\n      } else {\n        if (!this._recoverSwapAudioCodecDate || now - this._recoverSwapAudioCodecDate > this._config.recoverSwapAudioCodecDelay) {\n          this._recoverSwapAudioCodecDate = performance.now();\n          HlsAdapter._logger.warn(\"try to swap Audio Codec and recover media Error\");\n          this.hls.swapAudioCodec();\n          this.hls.recoverMediaError();\n        } else {\n          recover = false;\n          HlsAdapter._logger.error(\"cannot recover, last media error recovery failed\");\n        }\n      }\n      return recover;\n    }\n\n    /**\n     * Transforms the HLS error to player error code and category\n     * @param {Object} errorDetails - hls.js error details\n     * @returns {{code: number, category: number}} - player error code and category\n     * @private\n     */\n\n  }, {\n    key: '_getErrorData',\n    value: function _getErrorData(errorDetails) {\n      var code = 0;\n      var category = 0;\n      switch (errorDetails) {\n        case _hls2.default.ErrorDetails.MANIFEST_LOAD_ERROR:\n          category = _playkitJs.Error.Category.MANIFEST;\n          code = _playkitJs.Error.Code.HTTP_ERROR;\n          break;\n        case _hls2.default.ErrorDetails.MANIFEST_LOAD_TIMEOUT:\n          category = _playkitJs.Error.Category.MANIFEST;\n          code = _playkitJs.Error.Code.TIMEOUT;\n          break;\n        case _hls2.default.ErrorDetails.MANIFEST_PARSING_ERROR:\n          category = _playkitJs.Error.Category.MANIFEST;\n          code = _playkitJs.Error.Code.HLSJS_CANNOT_PARSE;\n          break;\n        case _hls2.default.ErrorDetails.LEVEL_LOAD_ERROR:\n          category = _playkitJs.Error.Category.NETWORK;\n          code = _playkitJs.Error.Code.HTTP_ERROR;\n          break;\n        case _hls2.default.ErrorDetails.LEVEL_LOAD_TIMEOUT:\n          category = _playkitJs.Error.Category.NETWORK;\n          code = _playkitJs.Error.Code.TIMEOUT;\n          break;\n        case _hls2.default.ErrorDetails.LEVEL_SWITCH_ERROR:\n          category = _playkitJs.Error.Category.PLAYER;\n          code = _playkitJs.Error.Code.BITRATE_SWITCH_ISSUE;\n          break;\n        case _hls2.default.ErrorDetails.FRAG_LOAD_ERROR:\n          category = _playkitJs.Error.Category.NETWORK;\n          code = _playkitJs.Error.Code.HTTP_ERROR;\n          break;\n        case _hls2.default.ErrorDetails.FRAG_LOOP_LOADING_ERROR:\n          category = _playkitJs.Error.Category.NETWORK;\n          code = _playkitJs.Error.Code.HTTP_ERROR;\n          break;\n        case _hls2.default.ErrorDetails.FRAG_LOAD_TIMEOUT:\n          category = _playkitJs.Error.Category.NETWORK;\n          code = _playkitJs.Error.Code.TIMEOUT;\n          break;\n        case _hls2.default.ErrorDetails.FRAG_PARSING_ERROR:\n          category = _playkitJs.Error.Category.MEDIA;\n          code = _playkitJs.Error.Code.HLS_FRAG_PARSING_ERROR;\n          break;\n        case _hls2.default.ErrorDetails.BUFFER_APPEND_ERROR:\n          category = _playkitJs.Error.Category.MEDIA;\n          code = _playkitJs.Error.Code.HLS_BUFFER_APPEND_ISSUE;\n          break;\n        case _hls2.default.ErrorDetails.BUFFER_APPENDING_ERROR:\n          category = _playkitJs.Error.Category.MEDIA;\n          code = _playkitJs.Error.Code.HLS_BUFFER_APPENDING_ISSUE;\n          break;\n        default:\n          break;\n      }\n      return { code: code, category: category };\n    }\n\n    /**\n     * Removes hls.js bindings.\n     * @returns {void}\n     * @private\n     */\n\n  }, {\n    key: '_removeBindings',\n    value: function _removeBindings() {\n      this._hls.off(_hls2.default.Events.ERROR, this._onError);\n      this._hls.off(_hls2.default.Events.LEVEL_SWITCHED, this._onLevelSwitched);\n      this._hls.off(_hls2.default.Events.AUDIO_TRACK_SWITCHED, this._onAudioTrackSwitched);\n    }\n\n    /**\n     * Getter for the src that the adapter plays on the video element.\n     * In case the adapter preformed a load it will return the manifest url.\n     * @public\n     * @returns {string} - The src url.\n     */\n\n  }, {\n    key: 'src',\n    get: function get() {\n      if (this._loadPromise && this._sourceObj) {\n        return this._sourceObj.url;\n      }\n      return \"\";\n    }\n\n    /**\n     * Get the duration in seconds.\n     * @returns {Number} - The playback duration.\n     * @public\n     */\n\n  }, {\n    key: 'duration',\n    get: function get() {\n      if (this.isLive()) {\n        return this._getLiveEdge();\n      } else {\n        return _get(HlsAdapter.prototype.__proto__ || Object.getPrototypeOf(HlsAdapter.prototype), 'duration', this);\n      }\n    }\n  }]);\n\n  return HlsAdapter;\n}(_playkitJs.BaseMediaSourceAdapter);\n\nHlsAdapter.id = 'HlsAdapter';\nHlsAdapter._logger = _playkitJs.BaseMediaSourceAdapter.getLogger(HlsAdapter.id);\nHlsAdapter._hlsMimeTypes = ['application/x-mpegurl', 'application/vnd.apple.mpegurl', 'audio/mpegurl', 'audio/x-mpegurl', 'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\nexports.default = HlsAdapter;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// playkit-hls.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3cefdc6875e14a04b064","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"playkit-js\",\"commonjs2\":\"playkit-js\",\"amd\":\"playkit-js\",\"root\":\"Playkit\"}\n// module id = 0\n// module chunks = 0","// @flow\nimport {registerMediaSourceAdapter} from 'playkit-js'\nimport HlsAdapter from'./hls-adapter'\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nexport default HlsAdapter;\nexport {__VERSION__ as VERSION, __NAME__ as NAME};\n\n// Register hls adapter to the media source adapter provider.\nif (HlsAdapter.isSupported()) {\n  registerMediaSourceAdapter(HlsAdapter);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","//@flow\nimport Hlsjs from 'hls.js'\nimport {BaseMediaSourceAdapter, Utils, Error} from 'playkit-js'\nimport {Track, VideoTrack, AudioTrack, TextTrack} from 'playkit-js'\n\nconst _defaultConfig: { [key: string]: any } = {\n  \"recoverDecodingErrorDelay\": 3000,\n  \"recoverSwapAudioCodecDelay\": 3000,\n  \"fragLoadingMaxRetry\": 4\n};\n\n/**\n * Adapter of hls.js lib for hls content.\n * @classdesc\n */\nexport default class HlsAdapter extends BaseMediaSourceAdapter {\n  /**\n   * The id of the adapter.\n   * @member {string} id\n   * @static\n   * @private\n   */\n  static id: string = 'HlsAdapter';\n  /**\n   * The adapter logger.\n   * @member {any} _logger\n   * @static\n   * @private\n   */\n  static _logger = BaseMediaSourceAdapter.getLogger(HlsAdapter.id);\n  /**\n   * The supported mime types by the hls adapter.\n   * @member {Array<string>} _hlsMimeType\n   * @static\n   * @private\n   */\n  static _hlsMimeTypes: Array<string> = [\n    'application/x-mpegurl',\n    'application/vnd.apple.mpegurl',\n    'audio/mpegurl',\n    'audio/x-mpegurl',\n    'video/x-mpegurl',\n    'video/mpegurl',\n    'application/mpegurl'\n  ];\n  /**\n   * The hls player instance.\n   * @member {any} _hls\n   * @private\n   */\n  _hls: any;\n\n  /**\n   * last recover date from decoding error\n   * @type {number}\n   * @private\n   */\n  _recoverDecodingErrorDate: number;\n\n  /**\n   * last recover date from audio swap codec operation\n   * @type {number}\n   * @private\n   */\n  _recoverSwapAudioCodecDate: number;\n\n  /**\n   * The load promise\n   * @member {Promise<Object>} - _loadPromise\n   * @type {Promise<Object>}\n   * @private\n   */\n  _loadPromise: ?Promise<Object>;\n  /**\n   * Reference to the player tracks.\n   * @member {Array<Track>} - _playerTracks\n   * @type {Array<Track>}\n   * @private\n   */\n  _playerTracks: Array<Track>;\n\n  /**\n   * Factory method to create media source adapter.\n   * @function createAdapter\n   * @param {HTMLVideoElement} videoElement - The video element that the media source adapter work with.\n   * @param {Object} source - The source Object.\n   * @param {Object} config - The player configuration.\n   * @returns {IMediaSourceAdapter} - New instance of the run time media source adapter.\n   * @static\n   */\n  static createAdapter(videoElement: HTMLVideoElement, source: Source, config: Object): IMediaSourceAdapter {\n    let hlsConfig = {};\n    if (Utils.Object.hasPropertyPath(config, 'playback.options.html5.hls')) {\n      hlsConfig = config.playback.options.html5.hls;\n    }\n    return new this(videoElement, source, hlsConfig);\n  }\n\n  /**\n   * Checks if hls adapter can play a given mime type.\n   * @function canPlayType\n   * @param {string} mimeType - The mime type to check.\n   * @returns {boolean} - Whether the hls adapter can play a specific mime type.\n   * @static\n   */\n  static canPlayType(mimeType: string): boolean {\n    let canHlsPlayType = (typeof mimeType === 'string') ? HlsAdapter._hlsMimeTypes.includes(mimeType.toLowerCase()) : false;\n    HlsAdapter._logger.debug('canPlayType result for mimeType:' + mimeType + ' is ' + canHlsPlayType.toString());\n    return canHlsPlayType;\n  }\n\n  /**\n   * Checks if hls adapter can play a given drm data.\n   * For hls.js it always returns false.\n   * @returns {boolean} - Whether the hls adapter can play a specific drm data.\n   * @static\n   */\n  static canPlayDrm(): boolean {\n    HlsAdapter._logger.warn('canPlayDrm result is false');\n    return false;\n  }\n\n  /**\n   * Checks if the hls adapter is supported.\n   * @function isSupported\n   * @returns {boolean} - Whether hls is supported.\n   * @static\n   */\n  static isSupported(): boolean {\n    let isHlsSupported = Hlsjs.isSupported();\n    HlsAdapter._logger.debug('isSupported:' + isHlsSupported);\n    return isHlsSupported;\n  }\n\n  /**\n   * @constructor\n   * @param {HTMLVideoElement} videoElement - The video element which will bind to the hls adapter\n   * @param {Object} source - The source object\n   * @param {Object} config - The media source adapter configuration\n   */\n  constructor(videoElement: HTMLVideoElement, source: Source, config: Object) {\n    HlsAdapter._logger.debug('Creating adapter. Hls version: ' + Hlsjs.version);\n    super(videoElement, source, config);\n    this._config = Utils.Object.mergeDeep({}, this._config, _defaultConfig);\n    this._hls = new Hlsjs(this._config);\n    this._addBindings();\n  }\n\n  /**\n   * Adds the required bindings with hls.js.\n   * @function _addBindings\n   * @private\n   * @returns {void}\n   */\n  _addBindings(): void {\n    this._hls.on(Hlsjs.Events.ERROR, (e, data) => {\n      this._onError(data);\n    });\n    this._hls.on(Hlsjs.Events.MANIFEST_LOADED, this._onManifestLoaded.bind(this));\n    this._hls.on(Hlsjs.Events.LEVEL_SWITCHED, this._onLevelSwitched.bind(this));\n    this._hls.on(Hlsjs.Events.AUDIO_TRACK_SWITCHED, this._onAudioTrackSwitched.bind(this));\n  }\n\n  /**\n   * Load the video source\n   * @function load\n   * @param {number} startTime - Optional time to start the video from.\n   * @returns {Promise<Object>} - The loaded data\n   * @override\n   */\n  load(startTime: ?number): Promise<Object> {\n    if (!this._loadPromise) {\n      this._loadPromise = new Promise((resolve) => {\n        let onLevelUpdated = () => {\n          this._hls.off(Hlsjs.Events.LEVEL_UPDATED, onLevelUpdated);\n          resolve({tracks: this._playerTracks});\n        };\n        this._hls.on(Hlsjs.Events.LEVEL_UPDATED, onLevelUpdated);\n        if (startTime) {\n          this._hls.startPosition = startTime;\n        }\n        if (this._sourceObj && this._sourceObj.url) {\n          this._hls.loadSource(this._sourceObj.url);\n          this._hls.attachMedia(this._videoElement);\n          this._trigger(BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, {mode: this.isAdaptiveBitrateEnabled() ? 'auto' : 'manual'});\n        }\n      });\n    }\n    return this._loadPromise;\n  }\n\n  /**\n   * Destroys the hls adapter.\n   * @function destroy\n   * @override\n   * @returns {Promise<*>} - The destroy promise.\n   */\n  destroy(): Promise<*> {\n    return super.destroy().then(() => {\n      HlsAdapter._logger.debug('destroy');\n      this._loadPromise = null;\n      this._playerTracks = [];\n      this._removeBindings();\n      this._hls.detachMedia();\n      this._hls.destroy();\n    });\n  }\n\n  /**\n   * Parse the hls tracks into player tracks.\n   * @param {any} data - The event data.\n   * @returns {Array<Track>} - The parsed tracks.\n   * @private\n   */\n  _parseTracks(data: any): Array<Track> {\n    let audioTracks = this._parseAudioTracks(data.audioTracks || []);\n    let videoTracks = this._parseVideoTracks(data.levels || []);\n    let textTracks = this._parseTextTracks(this._hls.subtitleTracks || []);\n    return audioTracks.concat(videoTracks).concat(textTracks);\n  }\n\n  /**\n   * Parse hls audio tracks into player audio tracks.\n   * @param {Array<Object>} hlsAudioTracks - The hls audio tracks.\n   * @returns {Array<AudioTrack>} - The parsed audio tracks.\n   * @private\n   */\n  _parseAudioTracks(hlsAudioTracks: Array<Object>): Array<AudioTrack> {\n    let audioTracks = [];\n    for (let i = 0; i < hlsAudioTracks.length; i++) {\n      // Create audio tracks\n      let settings = {\n        id: hlsAudioTracks[i].id,\n        active: this._hls.audioTrack === hlsAudioTracks[i].id,\n        label: hlsAudioTracks[i].name,\n        language: hlsAudioTracks[i].lang,\n        index: i\n      };\n      audioTracks.push(new AudioTrack(settings));\n    }\n    return audioTracks;\n  }\n\n  /**\n   * Parse hls video tracks into player video tracks.\n   * @param {Array<Object>} hlsVideoTracks - The hls video tracks.\n   * @returns {Array<VideoTrack>} - The parsed video tracks.\n   * @private\n   */\n  _parseVideoTracks(hlsVideoTracks: Array<Object>): Array<VideoTrack> {\n    let videoTracks = [];\n    for (let i = 0; i < hlsVideoTracks.length; i++) {\n      // Create video tracks\n      let settings = {\n        active: this._hls.startLevel === i,\n        label: hlsVideoTracks[i].name,\n        bandwidth: hlsVideoTracks[i].bitrate,\n        width: hlsVideoTracks[i].width,\n        height: hlsVideoTracks[i].height,\n        language: '',\n        index: i\n      };\n      videoTracks.push(new VideoTrack(settings));\n    }\n    return videoTracks;\n  }\n\n  /**\n   * Parse hls text tracks into player text tracks.\n   * @param {Array<Object>} hlsTextTracks - The hls text tracks.\n   * @returns {Array<TextTrack>} - The parsed text tracks.\n   * @private\n   */\n  _parseTextTracks(hlsTextTracks: Array<Object>): Array<TextTrack> {\n    let textTracks = [];\n    for (let i = 0; i < hlsTextTracks.length; i++) {\n      // Create text tracks\n      let settings = {\n        id: hlsTextTracks[i].id,\n        active: hlsTextTracks[i].default,\n        label: hlsTextTracks[i].name,\n        kind: hlsTextTracks[i].type.toLowerCase(),\n        language: hlsTextTracks[i].lang,\n        index: i\n      };\n      textTracks.push(new TextTrack(settings));\n    }\n    return textTracks;\n  }\n\n  /**\n   * Select an audio track.\n   * @function selectAudioTrack\n   * @param {AudioTrack} audioTrack - the audio track to select.\n   * @returns {void}\n   * @public\n   */\n  selectAudioTrack(audioTrack: AudioTrack): void {\n    if (audioTrack instanceof AudioTrack && !audioTrack.active && this._hls.audioTracks) {\n      this._hls.audioTrack = audioTrack.id;\n    }\n  }\n\n  /**\n   * Select a video track.\n   * @function selectVideoTrack\n   * @param {VideoTrack} videoTrack - the track to select.\n   * @returns {void}\n   * @public\n   */\n  selectVideoTrack(videoTrack: VideoTrack): void {\n    if (videoTrack instanceof VideoTrack && (!videoTrack.active || this.isAdaptiveBitrateEnabled()) && this._hls.levels) {\n      if (this.isAdaptiveBitrateEnabled()) {\n        this._trigger(BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, {mode: 'manual'});\n      }\n      this._hls.currentLevel = videoTrack.index;\n    }\n  }\n\n  /**\n   * Select a text track.\n   * @function selectTextTrack\n   * @param {TextTrack} textTrack - the track to select.\n   * @returns {void}\n   * @public\n   */\n  selectTextTrack(textTrack: TextTrack): void {\n    if (textTrack instanceof TextTrack && !textTrack.active && this._videoElement.textTracks) {\n      this._disableAllTextTracks();\n      this._videoElement.textTracks[textTrack.index].mode = 'hidden';\n      HlsAdapter._logger.debug('Text track changed', textTrack);\n      this._onTrackChanged(textTrack);\n    }\n  }\n\n  /** Hide the text track\n   * @function hideTextTrack\n   * @returns {void}\n   * @public\n   */\n  hideTextTrack(): void {\n    this._disableAllTextTracks();\n  }\n\n  /**\n   * Enables adaptive bitrate switching according to hls.js logic.\n   * @function enableAdaptiveBitrate\n   * @returns {void}\n   * @public\n   */\n  enableAdaptiveBitrate(): void {\n    if (!this.isAdaptiveBitrateEnabled()) {\n      this._trigger(BaseMediaSourceAdapter.CustomEvents.ABR_MODE_CHANGED, {mode: 'auto'});\n      this._hls.nextLevel = -1;\n    }\n  }\n\n  /**\n   * Checking if adaptive bitrate switching is enabled.\n   * @function isAdaptiveBitrateEnabled\n   * @returns {boolean} - Whether adaptive bitrate is enabled.\n   * @public\n   */\n  isAdaptiveBitrateEnabled(): boolean {\n    return this._hls.autoLevelEnabled;\n  }\n\n  /**\n   * Returns the live edge\n   * @returns {number} - live edge\n   * @private\n   */\n  _getLiveEdge(): number {\n    try {\n      let liveEdge;\n      if (this._hls.config.liveSyncDuration) {\n        liveEdge = this._videoElement.duration - this._hls.config.liveSyncDuration;\n      } else {\n        liveEdge = this._videoElement.duration - this._hls.config.liveSyncDurationCount * this._hls.levels[0].details.targetduration;\n      }\n      return liveEdge > 0 ? liveEdge : 0;\n    } catch (e) {\n      return NaN;\n    }\n  }\n\n  /**\n   * Seeking to live edge, calculated according hls configuration - liveSyncDuration or liveSyncDurationCount.\n   * @function seekToLiveEdge\n   * @returns {void}\n   * @public\n   */\n  seekToLiveEdge(): void {\n    try {\n      this._videoElement.currentTime = this._getLiveEdge();\n    } catch (e) {\n      return;\n    }\n  }\n\n  /**\n   * Checking if the current playback is live.\n   * @function isLive\n   * @returns {boolean} - Whether playback is live.\n   * @public\n   */\n  isLive(): boolean {\n    try {\n      return this._hls.levels[0].details.live;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Fired after manifest has been loaded.\n   * @function _onManifestLoaded\n   * @param {string} event - The event name.\n   * @param {any} data - The event data object.\n   * @private\n   * @returns {void}\n   */\n  _onManifestLoaded(event: string, data: any): void {\n    HlsAdapter._logger.debug('The source has been loaded successfully');\n    this._hls.startLoad();\n    this._playerTracks = this._parseTracks(data);\n  }\n\n  /**\n   * Triggers on video track selection (auto or manually) the 'videotrackchanged' event forward.\n   * @function _onLevelSwitched\n   * @param {string} event - The event name.\n   * @param {any} data - The event data object.\n   * @private\n   * @returns {void}\n   */\n  _onLevelSwitched(event: string, data: any): void {\n    let videoTrack = this._playerTracks.find((track) => {\n      return (track instanceof VideoTrack && track.index === data.level);\n    });\n    HlsAdapter._logger.debug('Video track changed', videoTrack);\n    this._onTrackChanged(videoTrack);\n  }\n\n  /**\n   * Triggers on audio track selection (auto or manually) the 'audiotrackchanged' event forward.\n   * @function _onAudioTrackSwitched\n   * @param {string} event - The event name.\n   * @param {any} data - The event data object.\n   * @private\n   * @returns {void}\n   */\n  _onAudioTrackSwitched(event: string, data: any): void {\n    let audioTrack = this._playerTracks.find((track) => {\n      return (track instanceof AudioTrack && track.id === data.id);\n    });\n    HlsAdapter._logger.debug('Audio track changed', audioTrack);\n    this._onTrackChanged(audioTrack);\n  }\n\n  /**\n   * Disables all the video tag text tracks.\n   * @returns {void}\n   * @private\n   */\n  _disableAllTextTracks() {\n    let vidTextTracks = this._videoElement.textTracks;\n    for (let i = 0; i < vidTextTracks.length; i++) {\n      vidTextTracks[i].mode = 'disabled';\n    }\n  }\n\n\n  /**\n   * Handles hls errors.\n   * @param {number} severity - The error severity.\n   * @param {number} category - The error category.\n   * @param {number} code - The error code.\n   * @param {any} description - The error description.\n   * @private\n   * @returns {void}\n   */\n  _handleError(severity: number, category: number, code: number, description: any): void {\n    const message = new Error(severity, category, code, {data: description});\n    this._trigger(BaseMediaSourceAdapter.Html5Events.ERROR, message);\n  }\n\n\n  /**\n   * Handles hls errors.\n   * @param {any} data - The event data object.\n   * @private\n   * @returns {void}\n   */\n  _onError(data: any): void {\n    let errorType = data.type;\n    let errorDetails = data.details;\n    let errorFatal = data.fatal;\n    if (errorFatal) {\n      let error: typeof Error;\n      switch (errorType) {\n        case Hlsjs.ErrorTypes.NETWORK_ERROR:\n          error = new Error(\n            Error.Severity.CRITICAL,\n            Error.Category.NETWORK,\n            Error.Code.HTTP_ERROR,\n            errorDetails);\n          break;\n        case Hlsjs.ErrorTypes.MEDIA_ERROR:\n          if (this._handleMediaError()) {\n            error = new Error(\n              Error.Severity.RECOVERABLE,\n              Error.Category.MEDIA,\n              Error.Code.HLS_FATAL_MEDIA_ERROR,\n              errorDetails);\n          } else {\n            error = new Error(\n              Error.Severity.CRITICAL,\n              Error.Category.MEDIA,\n              Error.Code.HLS_FATAL_MEDIA_ERROR,\n              errorDetails);\n          }\n          break;\n        default:\n          error = new Error(\n            Error.Severity.CRITICAL,\n            Error.Category.PLAYER,\n            Error.Code.HLS_FATAL_MEDIA_ERROR,\n            errorDetails);\n          break;\n      }\n      this._trigger(BaseMediaSourceAdapter.Html5Events.ERROR, error);\n      if (error && error.severity === Error.Severity.CRITICAL) {\n        this.destroy();\n      }\n    } else {\n      const errorData: { category: number, code: number } = this._getErrorData(errorDetails);\n      HlsAdapter._logger.warn(new Error(\n        Error.Severity.RECOVERABLE,\n        errorData.category,\n        errorData.code,\n        errorDetails));\n    }\n  }\n\n  _handleMediaError(): boolean {\n    const now: number = performance.now();\n    let recover = true;\n    if (!this._recoverDecodingErrorDate || (now - this._recoverDecodingErrorDate) > this._config.recoverDecodingErrorDelay) {\n      this._recoverDecodingErrorDate = performance.now();\n      HlsAdapter._logger.warn(\"try to recover media Error\");\n      this.hls.recoverMediaError();\n    } else {\n      if (!this._recoverSwapAudioCodecDate || (now - this._recoverSwapAudioCodecDate) > this._config.recoverSwapAudioCodecDelay) {\n        this._recoverSwapAudioCodecDate = performance.now();\n        HlsAdapter._logger.warn(\"try to swap Audio Codec and recover media Error\");\n        this.hls.swapAudioCodec();\n        this.hls.recoverMediaError();\n      } else {\n        recover = false;\n        HlsAdapter._logger.error(\"cannot recover, last media error recovery failed\");\n      }\n    }\n    return recover;\n  }\n\n\n  /**\n   * Transforms the HLS error to player error code and category\n   * @param {Object} errorDetails - hls.js error details\n   * @returns {{code: number, category: number}} - player error code and category\n   * @private\n   */\n  _getErrorData(errorDetails: Object): { category: number, code: number } {\n    let code = 0;\n    let category = 0;\n    switch (errorDetails) {\n      case Hlsjs.ErrorDetails.MANIFEST_LOAD_ERROR:\n        category = Error.Category.MANIFEST;\n        code = Error.Code.HTTP_ERROR;\n        break;\n      case Hlsjs.ErrorDetails.MANIFEST_LOAD_TIMEOUT:\n        category = Error.Category.MANIFEST;\n        code = Error.Code.TIMEOUT;\n        break;\n      case Hlsjs.ErrorDetails.MANIFEST_PARSING_ERROR:\n        category = Error.Category.MANIFEST;\n        code = Error.Code.HLSJS_CANNOT_PARSE;\n        break;\n      case Hlsjs.ErrorDetails.LEVEL_LOAD_ERROR:\n        category = Error.Category.NETWORK;\n        code = Error.Code.HTTP_ERROR;\n        break;\n      case Hlsjs.ErrorDetails.LEVEL_LOAD_TIMEOUT:\n        category = Error.Category.NETWORK;\n        code = Error.Code.TIMEOUT;\n        break;\n      case Hlsjs.ErrorDetails.LEVEL_SWITCH_ERROR:\n        category = Error.Category.PLAYER;\n        code = Error.Code.BITRATE_SWITCH_ISSUE;\n        break;\n      case Hlsjs.ErrorDetails.FRAG_LOAD_ERROR:\n        category = Error.Category.NETWORK;\n        code = Error.Code.HTTP_ERROR;\n        break;\n      case Hlsjs.ErrorDetails.FRAG_LOOP_LOADING_ERROR:\n        category = Error.Category.NETWORK;\n        code = Error.Code.HTTP_ERROR;\n        break;\n      case Hlsjs.ErrorDetails.FRAG_LOAD_TIMEOUT:\n        category = Error.Category.NETWORK;\n        code = Error.Code.TIMEOUT;\n        break;\n      case Hlsjs.ErrorDetails.FRAG_PARSING_ERROR:\n        category = Error.Category.MEDIA;\n        code = Error.Code.HLS_FRAG_PARSING_ERROR;\n        break;\n      case Hlsjs.ErrorDetails.BUFFER_APPEND_ERROR:\n        category = Error.Category.MEDIA;\n        code = Error.Code.HLS_BUFFER_APPEND_ISSUE;\n        break;\n      case Hlsjs.ErrorDetails.BUFFER_APPENDING_ERROR:\n        category = Error.Category.MEDIA;\n        code = Error.Code.HLS_BUFFER_APPENDING_ISSUE;\n        break;\n      default:\n        break;\n    }\n    return {code: code, category: category};\n  }\n\n  /**\n   * Removes hls.js bindings.\n   * @returns {void}\n   * @private\n   */\n  _removeBindings(): void {\n    this._hls.off(Hlsjs.Events.ERROR, this._onError);\n    this._hls.off(Hlsjs.Events.LEVEL_SWITCHED, this._onLevelSwitched);\n    this._hls.off(Hlsjs.Events.AUDIO_TRACK_SWITCHED, this._onAudioTrackSwitched);\n  }\n\n  /**\n   * Getter for the src that the adapter plays on the video element.\n   * In case the adapter preformed a load it will return the manifest url.\n   * @public\n   * @returns {string} - The src url.\n   */\n  get src(): string {\n    if (this._loadPromise && this._sourceObj) {\n      return this._sourceObj.url;\n    }\n    return \"\";\n  }\n\n  /**\n   * Get the duration in seconds.\n   * @returns {Number} - The playback duration.\n   * @public\n   */\n  get duration(): number {\n    if (this.isLive()) {\n      return this._getLiveEdge();\n    } else {\n      return super.duration;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./hls-adapter.js","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"hls.js\",\"commonjs2\":\"hls.js\",\"amd\":\"hls.js\",\"root\":\"Hls\"}\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}